#!/usr/bin/env python

import sys
import os
import time
import math
import hashlib
import random
import shutil
from xml.dom import minidom
from zipfile import ZipFile
from zipfile import ZIP_DEFLATED

DBPATH = "/home/dpetroff/code/python/fileshare/db.xml"
FILESDIR = "/home/dpetroff/code/python/fileshare/files"
WEBURL = "http://can3p.mine.nu:50020/fs/"

def init_xml_db():
    if not os.path.exists(DBPATH):
        #create document root
        xmlstr = u"<files></files>"
    else:
        #the hack is needed because minidom adds extrawhitespaces in file
        xmlstr = ""
        with open(DBPATH,"r") as f:
            for line in f:
                xmlstr += line.strip("\t\n")

    try:
        doc = minidom.parseString(xmlstr)
    except Exception:
        print("found empty xmldb, creating new one")
        doc = minidom.parseString(u"<files></files>")
    return doc

def add_file(options):
    zip_name =''

    if (len(options) >= 1) and (options[0] == "-name"):
        if(len(options) <= 2):
            usage()
        options.pop(0);
        zip_name = options.pop(0)

    files = map(os.path.abspath, options)
    
    if len(files) == 1:
        print("sharing single file")

    xml = init_xml_db()
    root = xml.firstChild
        
    root_max_id = root.getAttribute('maxid')
    if(root_max_id):
        new_id = int(root_max_id) + 1
    else:
        new_id = len(xml.getElementsByTagName("record")) + 1
    root.setAttribute(u'maxid', str(new_id))
    timestamp = math.floor(time.time())

    #we suggest that this method always generate unique values
    label = hashlib.md5(str(timestamp*random.random())).hexdigest()[-5:]

    #copy files and/or make an archive if needed
    dirname = FILESDIR + "/" + label
    os.mkdir(dirname)

    outname = ''
    if len(files) == 1:
        shutil.copy(files[0], FILESDIR + "/" + label)
        outname = files[0]
    else:
        #if len(files) > 1 we create a zip archive with all of them
        outname = zip_name + ".zip" if len(zip_name) > 0 else label + ".zip"
        full_zip_name = FILESDIR + "/" + label + "/" + outname

        archive = ZipFile(full_zip_name, "w", ZIP_DEFLATED)
        for fname in files:
            archive.write(fname, os.path.basename(fname))
        archive.close()

    #generate node for new record
    new_node = xml.createElement(u"record")
    new_node.setAttribute(u'id', str(new_id))
    new_node.setAttribute(u'date', str(int(timestamp)))
    new_node.setAttribute(u'label', label)
    new_node.setAttribute(u'dlcount', '0')
    new_node.setAttribute(u'fname', outname)

    for fname in files:
        if not os.path.exists(fname):
            print("file " + fname + "does not exist")
            continue
        
        fnode = xml.createElement(u"file")
        fnode.setAttribute(u"name", os.path.basename(fname).decode("utf-8"))
        fnode.setAttribute(u"origpath", os.path.dirname(fname).decode("utf-8"))
        new_node.appendChild(fnode)
    
    root.appendChild(new_node)

    with open(DBPATH, "w") as f:
        #f.write(xml.toprettyxml("\t", "\n","utf-8"))
        f.write(xml.toxml("utf-8"))

    print("download url: " + WEBURL + label)

def del_file(options): 
    if len(options) < 1:
        usage();

    xml = init_xml_db()
    root = xml.firstChild

    for el in root.getElementsByTagName("record"):
        label = el.getAttribute("label")
        if (label in options) or (len(options) == 1 and options[0] == '-a'):
            if os.path.exists(FILESDIR + "/" + label):
                shutil.rmtree(FILESDIR + "/" + label)
                root.removeChild(el)

    with open(DBPATH, "w") as f:
        f.write(xml.toprettyxml("\t", "\n"))

def list_files(options): 
    if not os.path.exists(DBPATH):
        print ("no db found. No files are shared ")
        return

    xml = init_xml_db()
    root = xml.firstChild

    idw = 4
    urlw = len(WEBURL) + 10 
    print("{0:{1}} {2:{3}} {4}".format('ID', idw, 'Url', urlw , 'Files'))

    for el in root.getElementsByTagName("record"):
        label = el.getAttribute("label")
        downloadNum = el.getAttribute("dlcount")
        id = el.getAttribute("id")

        files = el.getElementsByTagName("file")
        idprinted = False
        for f in files:
            fname = f.getAttribute("name")
            if not idprinted:
                print("{0:{1}} {2:{3}} {4}".format(id, idw, WEBURL + label, urlw , fname))
                idprinted = True
            else:
                print("{0:{1}} {2:{3}} {4}".format("", idw, "", urlw , fname))
                
                
    

def usage():
    print ("\tUsage: share " + "|".join(valid_actions) + " [-name name] files")
    sys.exit()

valid_actions = {
    'add': add_file, 
    'del': del_file, 
    'list': list_files
}

options = sys.argv[1:]
if not len(options):
    usage()

cmd = options.pop(0)
if (cmd not in valid_actions):
    usage()

valid_actions[cmd](options)

